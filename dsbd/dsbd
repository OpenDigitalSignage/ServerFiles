#!/bin/bash
# dsb daemon written in shell
# /TR 2015-12-XX
#############################################

SMB="$1"
WEB="$2"
LOG="$3"
FIFO="$4"
CACHE="$5"

# javascript files and templates
FILES="/var/lib/dsb"
TEMPLATES="$FILES/Templates"

exec 1>>$LOG
exec 2>&1

# log sth.
log() {
  d=`date "+%Y-%m-%d %H:%M:%S"`
  echo "[$d] $*" >> $LOG
}

# exit with some error
error() {
  log "$*"
  exit 1
}

# called once in beginning
startup() {
  log "START SERVICE"

  # test for some tools, which are needed
  test -x /usr/bin/ffmpeg || error "Need ffmpeg!"
  test -x /usr/bin/mutool || error "Need mutool!"
  test -x /usr/bin/dos2unix || error "Need dos2unix!"
  test -x /usr/bin/libreoffice || error "Need libreoffice!"

  # register cleanup function
  trap cleanup SIGHUP SIGINT SIGTERM SIGQUIT

  # libreoffice setup, we want nice pdf output!
  # https://wiki.openoffice.org/wiki/API/Tutorials/PDF_export
  CFG="$HOME/.config/libreoffice/4/user/registrymodifications.xcu"
  mkdir -p `dirname $CFG`
  cat <<EOF > $CFG
<?xml version="1.0" encoding="UTF-8"?>
<oor:items xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="ExportFormFields" oor:op="fuse"><value>false</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="IsAddStream" oor:op="fuse"><value>false</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="MaxImageResolution" oor:op="fuse"><value>1200</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="ReduceImageResolution" oor:op="fuse"><value>false</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="UseLosslessCompression" oor:op="fuse"><value>true</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="SelectPdfVersion" oor:op="fuse"><value>1</value></prop></item>
<item oor:path="/org.openoffice.Office.Common/Filter/PDF/Export"><prop oor:name="Quality" oor:op="fuse"><value>100</value></prop></item>
EOF

  cd $CACHE || error "Could not change to cachedir $CACHE"
}

# called once on end
cleanup() {
  log "END SERVICE"
  kill $INOTIFY_PID
  exit 0
}

###### xxx
# document.getElementById('some_frame_id').contentWindow.location.reload();


# -> direct ins web
conv_image() {
  cp $1 $2
}

# pdf, xps, cbz, and epub -> image
conv_pdf() {
  mutool draw -r 128 -o "%03d.png" puehlhofer_samstag_jan06_mitreferenzen.pdf
}

# office -> pdf -> image
# - wichtig, libreoffice einmal starten und pdf export qualität festlegen
conv_office() {
  libreoffice --convert-to "pdf" --headless $*
}

conv_video() {
  echo "lala"
}

# Inhalt eines Templates lesen und zurück geben
# Reihenfolge des einlesens:
# 1) SystemTemplate @ /var/lib/dsb
# 2) SMB Template
# 3) User Template
read_template_file() {
  Id="$1"
  File="$2"
  Value="$3"

  Type="${TYPES[$id]}"
  Section="${SECTIONS[$id]}"

  # System Template, SMB Template and User Template
  SysDir="$TEMPLATES/$Type"
  SMBDir="$SMB/Templates/$Type"
  UserDir="$SMB/$Section"

  if [ ! -d "$SMBDir" ]; then
    cp -r "$SysDir" "$SMBDir"
  fi

  if [ ! -d "$UserDir" ]; then
    cp -r "$SMBDir" "$UserDir"
  fi

  find "$UserDir" -iname "$File" | while read f; do
    Value=`cat "$f"`
  done

  echo "$Value"
}

generate_index() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`
  IFRAME_STYLES=`cat "$CACHE/iframe-styles"`
  IFRAME_LINKS=`cat "$CACHE/iframe-links"`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  LAYOUT=${LAYOUT/'%IFRAME_STYLES%'/"$IFRAME_STYLES"}
  LAYOUT=${LAYOUT/'%IFRAME_LINKS%'/"$IFRAME_LINKS"}
  echo "$LAYOUT" > "$WEB/index.html"
}

# "Ticker"
# - ticker hat ticker.txt
generate_iframe_ticker() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

# "SlideShow"
# - slideshow hat verzeichnis
# - alle bilder darin werden angezeigt
# - optionen via.?
generate_iframe_slideshow() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

# "Uhr"
# - hat auch optionen
generate_iframe_uhr() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`
  OPTIONEN=`read_template_file "$id" "Optionen.txt" ""`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  LAYOUT=${LAYOUT/'%OPTIONEN%'/"$OPTIONEN"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

# "Webseite"
# - nur eine webseite als option
generate_iframe_webseite() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`
  OPTIONEN=`read_template_file "$id" "Optionen.txt" ""`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  LAYOUT=${LAYOUT/'%OPTIONEN%'/"$OPTIONEN"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

# "Newsfeed"
# - einen feed und diverse einstellungen
generate_iframe_newsfeed() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`
  OPTIONEN=`read_template_file "$id" "Optionen.txt" ""`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  LAYOUT=${LAYOUT/'%OPTIONEN%'/"$OPTIONEN"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

# Type=Wetter Section="Wetter #1"
generate_iframe_wetter() {
  Id="$1"

  STYLE=`read_template_file "$id" "Style.txt" ""`
  LAYOUT=`read_template_file "$id" "Layout.txt" ""`
  BUTTON1=`read_template_file "$id" "Button1.txt" "Wetterbutton 1 nicht gesetzt!"`
  BUTTON2=`read_template_file "$id" "Button2.txt" "Wetterbutton 2 nicht gesetzt!"`
  BUTTON3=`read_template_file "$id" "Button3.txt" "Wetterbutton 3 nicht gesetzt!"`

  LAYOUT=${LAYOUT/'%STYLE%'/"$STYLE"}
  LAYOUT=${LAYOUT/'%BUTTON1%'/"$BUTTON1"}
  LAYOUT=${LAYOUT/'%BUTTON2%'/"$BUTTON2"}
  LAYOUT=${LAYOUT/'%BUTTON3%'/"$BUTTON3"}
  echo "$LAYOUT" > "$WEB/if_$id.html"
}

generate_iframe() {
  id="$1"

  # "Wetter #1"
  Section="${SECTIONS[$id]}"

  # Types: Background Wetter Ticker SlideShow Uhr Webseite Newsfeed
  Type="${TYPES[$id]}"

  case "$Type" in
    "Wetter")
      generate_iframe_wetter "$id"
      ;;
    "Ticker")
      generate_iframe_ticker "$id"
      ;;
    "SlideShow")
      generate_iframe_slideshow "$id"
      ;;
    "Uhr")
      generate_iframe_uhr "$id"
      ;;
    "Webseite")
      generate_iframe_webseite "$id"
      ;;
    "Newsfeed")
      generate_iframe_newsfeed "$id"
      ;;
  esac

  if [ "$Type" != "Background" ]; then
    # style
    echo "iframe#id$id {
     position: fixed;
     top: ${TOP[$id]};
     left: ${LEFT[$id]};
     width: ${WIDTH[$id]};
     height: ${HEIGHT[$id]};
    }" >> "$CACHE/iframe-styles"

    # <iframe id="wetter" src="if_wetter.html" frameborder="0" scrolling="no"></iframe>
    echo "<iframe id=\"id$id\" src=\"if_$id.html\" frameborder=\"0\" scrolling=\"no\"></iframe>" \
      >> "$CACHE/iframe-links"
  fi
}

# read layout file and set up the arrays:
# SECTIONS + TYPES + TOP + ...
read_layout() {
  file="$1"
  i="-1"
  while IFS=$'' read var val; do
    # section found
    if [[ $var == \[* ]]; then
      # sectionen die mit '#' beginnen, ignorieren
      x=`echo "$var"|tr -d "[]"|grep -v '^#'`
      test "x$x" = "x" && continue
      i=$((i+1))
      SECTIONS[$i]="$x"
    fi
    if [[ $var == Type=* ]]; then x=`echo "$var"|cut -b 6-`; TYPES[$i]="$x"; fi
    if [[ $var == Left=* ]]; then x=`echo "$var"|cut -b 6-`; LEFT[$i]="$x"; fi
    if [[ $var == Top=* ]]; then x=`echo "$var"|cut -b 5-`; TOP[$i]="$x"; fi
    if [[ $var == Width=* ]]; then x=`echo "$var"|cut -b 7-`; WIDTH[$i]="$x"; fi
    if [[ $var == Height=* ]]; then x=`echo "$var"|cut -b 8-`; HEIGHT[$i]="$x"; fi
  done < "$file"

  # create directories / files in $SMB and $WEB
  mkdir -p "$SMB/Templates"
  echo -n > "$CACHE/iframe-styles"
  echo -n > "$CACHE/iframe-links"
  for i in ${!SECTIONS[@]}; do
    # 1) nur die iframes generieren
    generate_iframe $i
  done

  for i in ${!SECTIONS[@]}; do
    test "${TYPES[$id]}" != "Background" && continue
    # 2) index für die iframes generieren
    generate_index $i
  done

  # 3) cleanup
  rm -f "$CACHE/"iframe-*
}

remove_layout() {
  for i in ${!SECTIONS[@]}; do
    rm -rf "$SMB/${SECTIONS[$i]}" "$WEB/${SECTIONS[$i]}"
  done
  SECTIONS=""
}

# file was created @ $SMB
handle_create() {
  fullpath="$1"
  directory="$2"
  basefile="$3"

  log "handle_create file($basefile) dir($directory) orig($fullpath)"

  # special file "Layout.dsb"
  if [ "${basefile}" = "layout.dsb" ]; then
    cat "$fullpath" | dos2unix > "$CACHE/$basefile"
    read_layout "$CACHE/$basefile"
    rm -f "$CACHE/$basefile"
    return
  fi
}

# file was removed in $SMB
handle_delete() {
  fullpath="$1"
  directory="$2"
  basefile="$3"

  log "handle_delete file($basefile) dir($directory) orig($fullpath)"

  # special file "Layout.dsb"
  if [ "${basefile}" = "layout.dsb" ]; then
    remove_layout
    return
  fi
}

# some error checking and initializing
test -z $5 && error "Need 5 parameter!"
startup

# globals arrays for the layout
declare -A "SECTIONS" "TYPES" "LEFT" "TOP" "WIDTH" "HEIGHT"

# start inotifywait and put in background
inotifywait --monitor --recursive \
  --event create,close_write,delete,moved_to,moved_from \
  --format "|%w%f|%e|" "$SMB" > "$FIFO" 2>&1 &
INOTIFY_PID=$?

# big loop, which starts things on some events
waiting="yes"
while read line; do

  # wait for inotify to be ready
  if [ "$waiting" = "yes" ]; then
    test "$line" = "Watches established." || continue
    waiting="no"

    # touch all files in smb root (force reading them)
    for i in $SMB/*; do
      test -f "$i" && touch "$i"
    done
    continue
  fi

  # thats the real input now
  fullpath=`echo $line|cut -d'|' -f2`
  event=`echo $line|cut -d'|' -f3`

  # remove $SMB prefix
  # /home/dsb/dsb1/path/file.txt -> path/file.txt
  lc_filename=${fullpath#$SMB/}

  # we need a name, if there is none, we can't do anything...
  test "x$lc_filename" = "x" && continue

  # lower case directory and basefile without smb prefix
  directory=`dirname "${lc_filename,,}"`
  basefile=`basename "${lc_filename,,}"`

  # debugging:
  # log "filename($filename) e($event)"
  # log "directory($directory) basefile($basefile) e($event)"
  # continue

  # .files are ignored
  [ "${basefile:0:1}" = "." ] && continue

  # create / delete
  case "$event" in
    "CREATE")
      handle_create "$fullpath" "$directory" "$basefile"
    ;;
    "CLOSE_WRITE,CLOSE")
      handle_create "$fullpath" "$directory" "$basefile"
    ;;
    "MOVED_TO")
      handle_create "$fullpath" "$directory" "$basefile"
    ;;
    "MOVED_FROM")
      handle_delete "$fullpath" "$directory" "$basefile"
    ;;
    "DELETE")
      handle_delete "$fullpath" "$directory" "$basefile"
    ;;
  esac
done < "$FIFO"
